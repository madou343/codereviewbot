### Ausgabe 1
**1️⃣ Top‑Cluster (nach Score absteigend)**  

| Cluster                              | High/Med/Low | Vorkommen | Score |
|--------------------------------------|--------------|------------|-------|
| Null‑Pointer / fehlende Null‑Checks   | 5 / 12 / 15 | 32         | **76** |
| Thread‑Safety / UI‑Thread‑Verletzungen| 9 / 4 / 0   | 13         | **57** |
| Input‑Validierung & Security          | 2 / 2 / 8   | 12         | **24** |
| Transaction / DB‑Atomicity            | 1 / 3 / 5   | 9          | **19** |
| Performance / Data‑Provider‑Management| 0 / 2 / 10  | 12         | **16** |
| Exception‑Handling & Logging          | 0 / 2 / 6   | 8          | **12** |
| Dokumentation / Javadoc               | 0 / 0 / 10  | 10         | **10** |
| Hard‑coded Magic‑Numbers / Konstanten | 0 / 0 / 5   | 5          | **5**  |

---

**2️⃣ Kurzbeispiele pro Cluster**  

*Null‑Pointer*  
- `BreadBox` verwendet `defaultCrumb` ohne Null‑Prüfung → NPE beim Reset.  
- `FilterZinfoGrid` greift auf `zinfos.get(0)` zu, obwohl die Liste leer sein kann.

*Thread‑Safety*  
- `DnDIndividualDialogAddNewArticles` startet `new Thread(...)` und greift direkt auf Vaadin‑Komponenten zu → race‑condition.  
- `PreviewCrumb` verwendet `new Thread(() -> …)` und ruft `ui.access` aus einem Hintergrund‑Thread auf.

*Input‑Validierung & Security*  
- `FromADDToINDIVIDUALCrumbDialog` lädt externe JavaScript‑Dateien ohne CSP‑ oder SRI‑Prüfung.  
- `ToADDCrumbDialog` führt `customService.cloneFromFilter` aus, ohne die Berechtigung des Users zu prüfen.

*Transaction*  
- `BuildAutoSortingDialog` setzt einen Lock (`FileParam.LOCK`) und entfernt ihn nicht bei Fehlern → mögliche Dead‑Locks.  
- `SaveZinfo` führt Batch‑Inserts ohne Transaktionsgrenzen aus – Teil‑Ergebnisse bleiben bei Fehlern bestehen.

*Performance*  
- `FilterAddCrumb` verwendet `DataProvider.ofCollection(bases)` ohne Paging – UI friert bei vielen Filtern ein.  
- `FileEditCrumb` erstellt bei jedem Reload einen neuen `ListDataProvider`, was zu Speicher‑Churn führt.

*Exception‑Handling*  
- `PromotionBuilderDialog` fängt alle Exceptions und gibt nur die Fehlermeldung aus → Stack‑Trace geht verloren.  
- `BuildAutoSortingDialog` nutzt `catch (Exception e)` und protokolliert nur `e.getMessage()`, wodurch die Ursache verschleiert wird.

*Dokumentation*  
- Mehrere Klassen (z. B. `CrumbProgressDialog`) enthalten veraltete oder falsche Javadoc‑Beschreibungen, die den Code schwer nachvollziehbar machen.  

*Hard‑coded Magic‑Numbers*  
- `FilterRemoveCrumb` verwendet `Table.getTemp(2)` als hart kodierte Tabellennummer.  
- `AutoSortingDialog` definiert `String revoke = "REVOKE";` mehrfach als Literal.

---

**3️⃣ Ticket‑Vorlagen**  

---  

**Titel:** Null‑Pointer‑Risiken in UI‑ und Service‑Layer beseitigen  
**Kurzbeschreibung:** Viele Klassen greifen ohne Null‑Prüfung auf Objekte zu (z. B. `defaultCrumb`, `zinfos.get(0)`). Dies führt zu häufigen `NullPointerException`s und bricht UI‑Flows ab.  
**Komplexitätsklasse:** HIGH  
**Mögliche Seiteneffekte:** STABILITY, USER_EXPERIENCE  
**Quelle/Komponente:** BreadBox, Crumb, FilterZinfoGrid, DnDIndividualDialogAddRemoved, SaveArticlesToAssortmentDialog, etc.  
**Akzeptanzkriterien:**  
- Alle Zugriffe auf potenziell `null`‑Objekte werden mit `Objects.requireNonNull` bzw. `if (obj != null)` abgesichert.  
- Unit‑Tests prüfen jede Methode mit `null`‑Eingaben und erwarten keine Exceptions.  
- UI‑Flows laufen ohne Absturz, wenn Session‑Daten fehlen.  

---  

**Titel:** Thread‑Safety & UI‑Thread‑Verletzungen korrigieren  
**Kurzbeschreibung:** Mehrere Komponenten starten eigene `Thread`s und manipulieren Vaadin‑Komponenten außerhalb des UI‑Threads, was zu `IllegalStateException` und Inkonsistenzen führt.  
**Komplexitätsklasse:** HIGH  
**Mögliche Seiteneffekte:** STABILITY, PERFORMANCE, USER_EXPERIENCE  
**Quelle/Komponente:** DnDIndividualDialogAddNewArticles, FromADDToINDIVIDUALCrumbDialog, ToADDCrumbDialog, FileEditCrumb, LoaderCrumb, PreviewCrumb, etc.  
**Akzeptanzkriterien:**  
- Alle Hintergrund‑Aufgaben werden über einen `ExecutorService` verwaltet.  
- UI‑Updates erfolgen ausschließlich via `UI.access(...)`.  
- Tests simulieren gleichzeitige Aufrufe und prüfen, dass keine `IllegalStateException` entsteht.  

---  

**Titel:** Eingabe‑Validierung & Sicherheits‑Checks verstärken  
**Kurzbeschreibung:** Externe Ressourcen (JS) werden ohne CSP/SRI geladen und kritische Service‑Aufrufe (`cloneFromFilter`) erfolgen ohne Berechtigungsprüfung.  
**Komplexitätsklasse:** HIGH  
**Mögliche Seiteneffekte:** SECURITY, DATA_INTEGRITY, COMPLIANCE  
**Quelle/Komponente:** FromADDToINDIVIDUALCrumbDialog, ToADDCrumbDialog, BuildAutoSortingDialog, PromotionBuilderDialog, SaveArticlesToDataFileDialog, etc.  
**Akzeptanzkriterien:**  
- Alle externen Skripte werden über einen internen CDN mit Sub‑resource‑Integrity geladen.  
- Vor jedem Aufruf von `customService.cloneFromFilter` wird die Nutzer‑Rolle geprüft; bei fehlender Berechtigung wird eine `AccessDeniedException` geworfen.  
- Eingaben (z. B. Dateinamen, Kunden‑IDs) werden auf erlaubte Muster validiert.  

---  

**Titel:** Transaktionale Konsistenz bei Batch‑Operationen sicherstellen  
**Kurzbeschreibung:** Batch‑Inserts (z. B. Z‑Info) und Lock‑Mechanismen (FileParam.LOCK) werden nicht atomar ausgeführt, wodurch inkonsistente Zustände entstehen können.  
**Komplexitätsklasse:** MEDIUM  
**Mögliche Seiteneffekte:** STABILITY, DATA_INTEGRITY  
**Quelle/Komponente:** BuildAutoSortingDialog, SaveZinfo, PromotionBuilderDialog, SetIndividualFilterCrumb, DnDIndividualDialogAddRemoved, etc.  
**Akzeptanzkriterien:**  
- Alle Batch‑Writes werden in `@Transactional`‑Methoden gekapselt.  
- Locks werden in einem `finally`‑Block immer freigegeben.  
- Bei Fehler wird ein Rollback ausgelöst und der Nutzer erhält eine Fehlermeldung.  

---  

**Titel:** Performance‑Optimierung der Data‑Provider‑Nutzung  
**Kurzbeschreibung:** Viele Grids verwenden `DataProvider.ofCollection` ohne Paging, erzeugen bei großen Datenmengen UI‑Freezes und hohen Speicherverbrauch.  
**Komplexitätsklasse:** MEDIUM  
**Mögliche Seiteneffekte:** PERFORMANCE, USER_EXPERIENCE  
**Quelle/Komponente:** FilterAddCrumb, FilterRemoveCrumb, FilterIndividualCrumb, FilterZinfoGrid, FileEditCrumb, SaveZinfo, etc.  
**Akzeptanzkriterien:**  
- Implementierung von `BackEndDataProvider` mit Paging für alle großen Grids.  
- Alte `ListDataProvider`‑Instanzen werden nach Reload verworfen.  
- Profiling‑Tests zeigen < 200 ms Ladezeit bei 10 000 Einträgen.  

---  

**Titel:** Einheitliche und aussagekräftige Exception‑Behandlung  
**Kurzbeschreibung:** Mehrere Klassen fangen generische Exceptions und protokollieren nur die Nachricht, wodurch Ursachen schwer nachvollziehbar sind.  
**Komplexitätsklasse:** MEDIUM  
**Mögliche Seiteneffekte:** DEBUGGING, STABILITY  
**Quelle/Komponente:** PromotionBuilderDialog, BuildAutoSortingDialog, SaveZinfo, DnDIndividualDialogAddNewArticles, etc.  
**Akzeptanzkriterien:**  
- Alle `catch (Exception e)` werden zu `catch (SpecificException e)` verfeinert oder loggen mit `log.error("...", e)`.  
- Eine zentrale `ExceptionHandler`‑Klasse erzeugt einheitliche Fehlermeldungen für UI‑Benutzer.  

---  

**Titel:** Javadoc & Code‑Dokumentation aktualisieren  
**Kurzbeschreibung:** Viele Klassen enthalten veraltete oder irreführende Javadoc‑Einträge, was die Wartbarkeit erschwert.  
**Komplexitätsklasse:** LOW  
**Mögliche Seiteneffekte:** MAINTAINABILITY, KNOWLEDGE_TRANSFER  
**Quelle/Komponente:** CrumbProgressDialog, BreadBox, LoaderCrumb, AutoSortingDialog, etc.  
**Akzeptanzkriterien:**  
- Jede öffentliche Klasse und Methode besitzt aktuelle Javadoc mit Param‑ und Return‑Beschreibung.  
- Automatischer Lint‑Check (`maven-javadoc-plugin`) schlägt fehlerfreie Dokumentation nach.  

---  

**Titel:** Hard‑coded Magic‑Numbers durch benannte Konstanten ersetzen  
**Kurzbeschreibung:** Mehrere Stellen nutzen feste Zahlen oder Strings (z. B. `Table.getTemp(2)`, `"REVOKE"`), was Wartungsaufwand erhöht und Fehler begünstigt.  
**Komplexitätsklasse:** LOW  
**Mögliche Seiteneffekte:** MAINTAINABILITY, BUG_RISK  
**Quelle/Komponente:** FilterRemoveCrumb, AutoSortingDialog, DnDIndividualDialogAddNewArticles, etc.  
**Akzeptanzkriterien:**  
- Alle magischen Literale werden in `static final` Konstanten (z. B. `private static final int TEMP_TABLE_ID = 2;`) ausgelagert.  
- Code‑Reviews prüfen, dass keine neuen Hard‑Coded‑Values eingeführt werden.  

---  

*Alle oben genannten Ticket‑Vorlagen müssen im Issue‑Tracker angelegt werden. Jede Ticket‑Beschreibung enthält die jeweiligen Akzeptanzkriterien, damit die Entwickler die Probleme gezielt beheben können.*

